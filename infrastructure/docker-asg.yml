AWSTemplateFormatVersion: '2010-09-09'

Description: byocm docker asg

Parameters:
  keyName:
    Description: Key pair to use for instances
    Type: String
    Default: eddy.snow@intapp-devopssbx

  vpcStackName:
    Description: Name of the vpc stack in which to deploy the cluster
    Type: String
    Default: byocm-vpc

  stackName:
    Description: Name of the stack to distinguish it from other stacks
    Type: String
    Default: byocm-docker

  instanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium

  ec2Image:
    Description: AMI for the ec2 instance
    Type: String

  s3PackageBucket:
    Description: S3 Bucket for docker package
    Type: String
    Default: 278942993584-eddy-scratch

  dockerPackageName:
    Description: S3 Key for docker package
    Type: String

  promKey:
    Description: Access key for the prometheus IAM user
    Type: String

  promSecret:
    Description: Secret key for the prometheus IAM user
    Type: String
    NoEcho: True

Resources:
  ec2VMUpdateWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  eC2VMUpdateWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: autoScalingGroup
    Properties:
      Handle: !Ref ec2VMUpdateWaitHandle
      Timeout: '600'

############################ Load Balancer ######################################
  loadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      IpAddressType: ipv4
      Name: !Join [ "-", [ !Ref stackName, "alb" ]]
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "public-subnet1" ]]
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "public-subnet2" ]]
      SecurityGroups:
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "webtraffic-securitygroup" ]]
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref stackName, "alb" ]]
        - Key: ProductComponents
          Value: alb

############################ Target Group ######################################
  loadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /health/index.html
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Join [ "-", [ !Ref stackName, "tgt", "grp" ]]
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref stackName, "tgt", "grp" ]]
        - Key: ProductComponents
          Value: targetgroup
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Ref vpcStackName
  loadBalancerTargetGroup8080:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Join [ "-", [ !Ref stackName, "tgt", "grp", "8080" ]]
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref stackName, "tgt", "grp", "8080" ]]
        - Key: ProductComponents
          Value: targetgroup
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Ref vpcStackName
  loadBalancerTargetGroup9090:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: 9090
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200
      Name: !Join [ "-", [ !Ref stackName, "tgt", "grp", "9090" ]]
      Port: 9090
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref stackName, "tgt", "grp", "9090" ]]
        - Key: ProductComponents
          Value: targetgroup
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Ref vpcStackName

############################ ALB Listener ######################################
  loadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref loadBalancerTargetGroup
      LoadBalancerArn: !Ref loadBalancer
      Port: 80
      Protocol: HTTP
  loadBalancerListener8080:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref loadBalancerTargetGroup8080
      LoadBalancerArn: !Ref loadBalancer
      Port: 8080
      Protocol: HTTP
  loadBalancerListener9090:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref loadBalancerTargetGroup9090
      LoadBalancerArn: !Ref loadBalancer
      Port: 9090
      Protocol: HTTP

  ssmInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ssmRole

  ssmRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:DescribeAssociation'
                  - 'ssm:GetDeployablePatchSnapshotForInstance'
                  - 'ssm:GetDocument'
                  - 'ssm:GetParameters'
                  - 'ssm:ListAssociations'
                  - 'ssm:ListInstanceAssociations'
                  - 'ssm:PutInventory'
                  - 'ssm:UpdateAssociationStatus'
                  - 'ssm:UpdateInstanceAssociationStatus'
                  - 'ssm:UpdateInstanceInformation'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2messages:AcknowledgeMessage'
                  - 'ec2messages:DeleteMessage'
                  - 'ec2messages:FailMessage'
                  - 'ec2messages:GetEndpoint'
                  - 'ec2messages:GetMessages'
                  - 'ec2messages:SendReply'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstanceStatus'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'ds:CreateComputer'
                  - 'ds:DescribeDirectories'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:Get*'
                  - 's3:List*'
                  - 's3:AbortMultipartUpload'
                  - 's3:ListMultipartUploadParts'
                  - 's3:ListBucketMultipartUploads'
                Resource: '*'

  autoScalingLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ec2Image
      IamInstanceProfile: !Ref ssmInstanceProfile
      InstanceType: !Ref instanceType
      KeyName: !Ref keyName
      SecurityGroups:
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "internaltraffic-securitygroup" ]]
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "webtraffic-securitygroup" ]]
      UserData: !Base64
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
            - 'echo '
            - !Ref dockerPackageName
            - |
              # run init scripts
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackId'
            - '         --resource autoScalingGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

  autoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Metadata:
      AWS::CloudFormation::Authentication:
        s3AccessCreds:
          type: S3
          roleName: !Ref ssmRole
          buckets:
            - !Ref s3PackageBucket
      AWS::CloudFormation::Init:
        config:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.autoScalingGroup.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource autoScalingGroup --region ${AWS::Region}
                runas=root
              mode: "000400"
              owner: "root"
              group: "root"
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                interval=1
              mode: "000400"
              owner: "root"
              group: "root"
            /usr/local/bin/init-update.sh:
              content: !Sub |
                #!/bin/bash

                sudo yum install â€“y epel-release
                sudo yum clean all
                sudo yum -y update
              mode: "000755"
            /usr/local/bin/docker-install.sh:
              content: !Sub |
                #!/bin/bash

                if [ -x "$(command -v docker)" ]; then
                  echo "docker already installed"
                else
                  sudo yum install -y docker
                  sudo service docker start
                  sudo usermod -a -G docker ec2-user
                fi

                if [ -x "$(command -v docker-compose)" ]; then
                  echo "docker-compose already installed"
                else
                  sudo curl -Ls "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                  sudo chmod +x /usr/local/bin/docker-compose
                  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
                fi
              mode: "000755"
            /usr/local/bin/build-solution.sh:
              content: !Sub |
                #!/bin/bash
                sudo -E docker-compose -f /stage/docker-compose.yml stop
                sudo -E docker-compose -f /stage/docker-compose.yml build
                sudo -E docker-compose -f /stage/docker-compose.yml up -d
              mode: "000755"
            /package/wordpress.zip:
              source: !Ref dockerPackageName
              authentication: s3AccessCreds
            /etc/systemd/system/node_exporter.service:
              content: !Sub |
                [Unit]
                Description=Node Exporter
                Wants=network-online.target
                After=network-online.target

                [Service]
                User=root
                ExecStart=/prometheus/node_exporter/node_exporter

                [Install]
                WantedBy=default.target
              mode: "000664"
            /prometheus/node_exporter.tar.gz:
              source: https://github.com/prometheus/node_exporter/releases/download/v0.17.0/node_exporter-0.17.0.linux-amd64.tar.gz
            /usr/local/bin/install-exporter.sh:
              content: !Sub |
                #!/bin/bash

                echo "$(date) - 050.1-extracting the node exporter archive" | sudo tee --append /home/ec2-user/cfn-init.log
                tar -xzvf /prometheus/node_exporter.tar.gz
                mv node_exporter-0.17.0.linux-amd64 node_exporter

                echo "$(date) - 050.2-enabling node exporter as a service and starting it" | sudo tee --append /home/ec2-user/cfn-init.log
                sudo systemctl daemon-reload
                sudo systemctl start node_exporter
                sudo systemctl enable node_exporter
              mode: "000755"
          commands:
            010-script-start:
              command: "echo \"$(date) - 010-script-start\" | sudo tee --append /home/ec2-user/cfn-init.log && sudo service cfn-hup start"
            020-run-updates:
              command: "echo \"$(date) - 020-run-updates\" | sudo tee --append /home/ec2-user/cfn-init.log && /usr/local/bin/init-update.sh"
            030-run-docker-install:
              command: "echo \"$(date) - 030-run-docker-install\" | sudo tee --append /home/ec2-user/cfn-init.log && /usr/local/bin/docker-install.sh"
            040-unpack-package:
              command: "echo \"$(date) - 040-unpack-package\" | sudo tee --append /home/ec2-user/cfn-init.log && sudo unzip -o /package/wordpress.zip -d /stage/"
            041-build-solution:
              command: "echo \"$(date) - 041-build-solution\" | sudo tee --append /home/ec2-user/cfn-init.log && /usr/local/bin/build-solution.sh"
              ignoreErrors: true
              env:
                PROM_ACCESS_KEY: !Ref promKey
                PROM_SECRET_KEY: !Ref promSecret
            050-install-prometheus-exporter:
              command: "echo \"$(date) - 050-install-prometheus-exporter\" | sudo tee --append /home/ec2-user/cfn-init.log && sudo /usr/local/bin/install-exporter.sh"
              cwd: /prometheus
            999-signal-complete:
              command: !Join
                - ''
                - - '/opt/aws/bin/cfn-signal -e $? -r "call to 999-signal-complete" '
                  - !Base64
                    Ref: ec2VMUpdateWaitHandle
              ignoreErrors: true
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      AvailabilityZones:
        - !Select
          - '0'
          - !GetAZs ''
        - !Select
          - '1'
          - !GetAZs ''
      VPCZoneIdentifier:
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "private-subnet1" ]]
        - Fn::ImportValue: !Join [ "-", [ !Ref vpcStackName, "private-subnet2" ]]
      LaunchConfigurationName: !Ref autoScalingLaunchConfig
      MinSize: 1
      MaxSize: 2
      TargetGroupARNs:
        - !Ref loadBalancerTargetGroup
        - !Ref loadBalancerTargetGroup8080
        - !Ref loadBalancerTargetGroup9090
      Tags:
        - Key: Name
          Value: !Join [ "-", [ !Ref stackName, "asg" ]]
          PropagateAtLaunch: 'true'

  scalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: '60'
      AutoScalingGroupName: !Ref autoScalingGroup
      ScalingAdjustment: 1

  siteRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: "eu.sbx.kube.intapp.com."
      Comment: Record for byocm site
      Name: "blog.eu.sbx.kube.intapp.com."
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - Fn::GetAtt: [ loadBalancer, DNSName ]

Outputs:
  loadBalancerCname:
    Description: CNAME for ALB
    Value:
      Fn::GetAtt: [ loadBalancer, DNSName ]
    Export:
      Name: !Join [ "-", [ !Ref stackName, "loadBalancerCname" ]]


